BMA_data_study$se_pcc <- BMA_data_study$se_pcc_2/BMA_data_study$study_size
BMA_data_study$se_pcc_2 <- Winsorize(x = BMA_data_study$se_pcc_2, minval = NULL, maxval = NULL, probs = c(0.01,0.99))
BMA_data_study <- read_excel("C:/Users/hso20/OneDrive/Plocha/Bachelor thesis/Sacred temple of the Data Set/BMA/BMA_data_corr_fix.xlsx",
sheet = "study_w", n_max = 1655)
BMA_data_study$pcc_2 <- Winsorize(x = BMA_data_study$pcc_2, minval = NULL, maxval = NULL, probs = c(0.01,0.99))
BMA_data_study$se_pcc_2 <- Winsorize(x = BMA_data_study$se_pcc_2, minval = NULL, maxval = NULL, probs = c(0.01,0.99))
BMA_data_study$pcc <- BMA_data_study$pcc_2/BMA_data_study$study_size
BMA_data_study$se_pcc <- BMA_data_study$se_pcc_2/BMA_data_study$study_size
summary(BMA_data_study)
BMA_data_study <- read_excel("C:/Users/hso20/OneDrive/Plocha/Bachelor thesis/Sacred temple of the Data Set/BMA/BMA_data_corr_fix.xlsx",
sheet = "study_w", n_max = 1655)
BMA_data_study$pcc_2 <- Winsorize(x = BMA_data_study$pcc_2, minval = NULL, maxval = NULL, probs = c(0.01,0.99))
BMA_data_study$se_pcc_2 <- Winsorize(x = BMA_data_study$se_pcc_2, minval = NULL, maxval = NULL, probs = c(0.01,0.99))
BMA_data_study$pcc <- BMA_data_study$pcc_2/BMA_data_study$study_size
BMA_data_study$se_pcc <- BMA_data_study$se_pcc_2/BMA_data_study$study_size
BMA_data_study_w <- (BMA_data_study[BMA_data_study$grp_reward == 1,1:34])
BMA_data_study <- read_excel("C:/Users/hso20/OneDrive/Plocha/Bachelor thesis/Sacred temple of the Data Set/BMA/BMA_data_corr_fix.xlsx",
sheet = "study_w", n_max = 1655)
BMA_data_study$pcc_2 <- Winsorize(x = BMA_data_study$pcc_2, minval = NULL, maxval = NULL, probs = c(0.01,0.99))
BMA_data_study$se_pcc_2 <- Winsorize(x = BMA_data_study$se_pcc_2, minval = NULL, maxval = NULL, probs = c(0.01,0.99))
BMA_data_study$pcc <- BMA_data_study$pcc_2/BMA_data_study$study_size
BMA_data_study$se_pcc <- BMA_data_study$se_pcc_2/BMA_data_study$study_size
BMA_data_study_w <- (BMA_data_study[BMA_data_study$grp_reward == 1,1:34])
summary(BMA_data_study_w)
BMA_num_study_w <- data.frame(BMA_data_study_w, stringsAsFactors = TRUE)
summary(BMA_num_study_w)
BMA_data_precision <- read_excel("C:/Users/hso20/OneDrive/Plocha/Bachelor thesis/Sacred temple of the Data Set/BMA/BMA_data_corr_fix.xlsx",
sheet = "precision_w", n_max = 1655)
BMA_data_precision$pcc_2 <- Winsorize(x = BMA_data_precision$pcc_2, minval = NULL, maxval = NULL, probs = c(0.01,0.99))
BMA_data_precision$se_pcc_2 <- Winsorize(x = BMA_data_precision$se_pcc_2, minval = NULL, maxval = NULL, probs = c(0.01,0.99))
BMA_data_precision$se_precision <- 1/BMA_data_precision$se_pcc_2
BMA_data_precision$pcc <- BMA_data_precision$pcc_2*BMA_data_precision$se_precision
BMA_data_precision$se_pcc <- BMA_data_precision$se_pcc_2*BMA_data_precision$se_precision
BMA_data_precision_w <- (BMA_data_precision[BMA_data_precision$grp_reward == 1,1:34])
BMA_num_precision_w <- data.frame(BMA_data_precision_w, stringsAsFactors = TRUE)
summary(BMA_num_precision_w)
BMA_num_precision_w <- data.frame(BMA_data_precision_w, stringsAsFactors = TRUE)
summary(BMA_num_precision_w)
BMA_num_precision_w <- bms(BMA_num_precision_w, burn=1e5,iter=3e5, g="UIP", mprior="dilut", nmodel=50000, mcmc="bd", user.int=FALSE)
print(BMA_num_precision_w)
image(BMA_num_precision_w, yprop2pip=FALSE,order.by.pip=TRUE, do.par=TRUE, do.grid=TRUE, do.axis=TRUE,cex.axis = 0.7,
xlab = "", main = "")
summary(BMA2)
#Extracting the coefficients and plotting the results
coef(BMA2,order.by.pip= F, exact=T, include.constant=T)
coef(BMA_num_precision_w,order.by.pip= F, exact=T, include.constant=T)
BMA_data_precision <- read_excel("C:/Users/hso20/OneDrive/Plocha/Bachelor thesis/Sacred temple of the Data Set/BMA/BMA_data_corr_fix.xlsx",
sheet = "precision_w", n_max = 1655)
BMA_data_precision$pcc_2 <- Winsorize(x = BMA_data_precision$pcc_2, minval = NULL, maxval = NULL, probs = c(0.01,0.99))
BMA_data_precision$se_pcc_2 <- Winsorize(x = BMA_data_precision$se_pcc_2, minval = NULL, maxval = NULL, probs = c(0.01,0.99))
BMA_data_precision$se_precision <- 1/BMA_data_precision$se_pcc_2
BMA_data_precision$pcc <- BMA_data_precision$pcc_2*BMA_data_precision$se_precision
BMA_data_precision$se_pcc <- BMA_data_precision$se_pcc_2*BMA_data_precision$se_precision
BMA_data_precision_w <- (BMA_data_precision[BMA_data_precision$grp_reward == 1,1:34])
BMA_num_precision_w <- data.frame(BMA_data_precision_w, stringsAsFactors = TRUE)
summary(BMA_num_precision_w)
BMA_precision_w <- bms(BMA_num_precision_w, burn=1e5,iter=3e5, g="UIP", mprior="dilut", nmodel=50000, mcmc="bd", user.int=FALSE)
print(BMA_precision_w)
coef(BMA_precision_w,order.by.pip= F, exact=T, include.constant=T)
image(BMA__precision_w, yprop2pip=FALSE,order.by.pip=TRUE, do.par=TRUE, do.grid=TRUE, do.axis=TRUE,cex.axis = 0.7,
xlab = "", main = "")
image(BMA_precision_w, yprop2pip=FALSE,order.by.pip=TRUE, do.par=TRUE, do.grid=TRUE, do.axis=TRUE,cex.axis = 0.7,
xlab = "", main = "")
coef(BMA_study_w,order.by.pip= F, exact=T, include.constant=T)
print(BMA_study_w)
summary(BMA2)
#Extracting the coefficients and plotting the results
coef(BMA2,order.by.pip= F, exact=T, include.constant=T)
#install.packages("LowRankQP")
library(ggplot2)
library(readxl)
library(stats)
library(DescTools) #Used for winsorization
library(sandwich)
library(lmtest) #Check for necessity
library(multiwayvcov)
library(metafor)
library(bayesm)
library(puniform)
library(haven)
library(meta)
library(AER)
library(BMS)
BMA_data_study <- read_excel("C:/Users/hso20/OneDrive/Plocha/Bachelor thesis/Sacred temple of the Data Set/BMA/BMA_data_corr_fix.xlsx",
sheet = "study_w", n_max = 1655)
BMA_data_study$pcc_2 <- Winsorize(x = BMA_data_study$pcc_2, minval = NULL, maxval = NULL, probs = c(0.01,0.99))
BMA_data_study$se_pcc_2 <- Winsorize(x = BMA_data_study$se_pcc_2, minval = NULL, maxval = NULL, probs = c(0.01,0.99))
BMA_data_study$pcc <- BMA_data_study$pcc_2/BMA_data_study$study_size
BMA_data_study$se_pcc <- BMA_data_study$se_pcc_2/BMA_data_study$study_size
BMA_data_study_w <- (BMA_data_study[BMA_data_study$grp_reward == 1,1:34])
BMA_num_study_w <- data.frame(BMA_data_study_w, stringsAsFactors = TRUE)
summary(BMA_num_study_w)
#Bma for the new data set
BMA_study_w <- bms(BMA_num_study_w, burn=1e5,iter=3e5, g="UIP", mprior="dilut", nmodel=50000, mcmc="bd", user.int=FALSE)
print(BMA_study_w)
coef(BMA_study_w,order.by.pip= F, exact=T, include.constant=T)
image(BMA_study_w, yprop2pip=FALSE,order.by.pip=TRUE, do.par=TRUE, do.grid=TRUE, do.axis=TRUE,cex.axis = 0.7,
xlab = "", main = "")
### Weighing by precision ###
#Data set plus winsorization
BMA_data_precision <- read_excel("C:/Users/hso20/OneDrive/Plocha/Bachelor thesis/Sacred temple of the Data Set/BMA/BMA_data_corr_fix.xlsx",
sheet = "precision_w", n_max = 1655)
BMA_data_precision$pcc_2 <- Winsorize(x = BMA_data_precision$pcc_2, minval = NULL, maxval = NULL, probs = c(0.01,0.99))
BMA_data_precision$se_pcc_2 <- Winsorize(x = BMA_data_precision$se_pcc_2, minval = NULL, maxval = NULL, probs = c(0.01,0.99))
BMA_data_precision$se_precision <- 1/BMA_data_precision$se_pcc_2
BMA_data_precision$pcc <- BMA_data_precision$pcc_2*BMA_data_precision$se_precision
BMA_data_precision$se_pcc <- BMA_data_precision$se_pcc_2*BMA_data_precision$se_precision
BMA_data_precision_w <- (BMA_data_precision[BMA_data_precision$grp_reward == 1,1:34])
BMA_num_precision_w <- data.frame(BMA_data_precision_w, stringsAsFactors = TRUE)
summary(BMA_num_precision_w)
#Bma for the new data set
BMA_precision_w <- bms(BMA_num_precision_w, burn=1e5,iter=3e5, g="UIP", mprior="dilut", nmodel=50000, mcmc="bd", user.int=FALSE)
print(BMA_precision_w)
coef(BMA_precision_w,order.by.pip= F, exact=T, include.constant=T)
image(BMA_precision_w, yprop2pip=FALSE,order.by.pip=TRUE, do.par=TRUE, do.grid=TRUE, do.axis=TRUE,cex.axis = 0.7,
xlab = "", main = "")
coef(BMA_study_w,order.by.pip= F, exact=T, include.constant=T)
coef(BMA_precision_w,order.by.pip= F, exact=T, include.constant=T)
#install.packages("LowRankQP")
library(ggplot2)
library(readxl)
library(stats)
library(DescTools) #Used for winsorization
library(sandwich)
library(lmtest) #Check for necessity
library(multiwayvcov)
library(metafor)
library(bayesm)
library(puniform)
library(haven)
library(meta)
library(AER)
library(BMS)
print(BMA_precision_w)
coef(BMA_precision_w,order.by.pip= F, exact=T, include.constant=T)
print(BMA_study_w)
coef(BMA_study_w,order.by.pip= F, exact=T, include.constant=T)
print(BMA_precision_w)
coef(BMA_precision_w,order.by.pip= F, exact=T, include.constant=T)
coef(BMA2,order.by.pip= F, exact=T, include.constant=T)
summary(BMA2)
library(ggplot2)
library(readxl)
library(stats)
library(DescTools) #Used for winsorization
library(sandwich)
library(lmtest) #Check for necessity
library(multiwayvcov)
library(metafor)
library(bayesm)
library(puniform)
library(haven)
library(meta)
library(AER)
library(BMS)
######################### Start of code #########################
#################
#Original dataset
#################
#original data
dataset_orig <- read_excel("C:/Users/hso20/OneDrive/Plocha/Bachelor thesis/Sacred temple of the Data Set/data_set_bachelor_thesis_cala.xlsx",
n_max = 1655)
#summary(dataset$pcc)
#summary(dataset$se_precision)
#funnel_orig <- plot.default(x = dataset$pcc, y = dataset$se_precision, type = "p", main = "Default funnel",
#xlab = "PCC", ylab = "Precision (1/SE)")
##################################
#Identifying the treatment groups
##################################
#Only those observations which correspond to the reward groups (control groups taken out)
dataset <- dataset_orig[dataset_orig$grp_reward == 1,]
#############################
#Winsorization and groundwork
#############################
dataset$pcc_w <- Winsorize(x = dataset$pcc, minval = NULL, maxval = NULL, probs = c(0.01,0.99))
dataset$se_pcc_w <- Winsorize(x = dataset$se_pcc, minval = NULL, maxval = NULL, probs = c(0.01,0.99))
dataset$se_precision_w <- 1/dataset$se_pcc_w
dataset$t_adjusted_w <- Winsorize(x = dataset$t_adjusted, minval = NULL, maxval = NULL, probs = c(0.01,0.99))
dataset$significant_w <- c(rep(0,nrow(dataset)))
dataset$significant_w[dataset$t_adjusted_w>1.96] <- 1
#############################
#Summary statistics & Plots
#############################
#Summary statistics and the funnel plot for the winsorized data
summary(dataset$pcc_w)
summary(dataset$se_precision_w)
filter_pcc_w <- (dataset$pcc_w> -0.38851 & dataset$pcc_w<0.525172) #Excluding the outliers from the graph
#Funnel plot
(funnel_win <- ggplot(data = dataset[filter_pcc_w,], aes(x = pcc_w[filter_pcc_w], y = se_precision_w[filter_pcc_w])) +
geom_point(colour = "#0d4ed1") +
labs(title = NULL, x = "Partial correlation coefficient", y = "Precision of the estimate (1/SE)") +
theme(axis.line = element_line(color = "black", size = 0.5, linetype = "solid"),
axis.text.x = element_text(colour = "black"), axis.text.y = element_text(colour = "black"),
panel.background = element_rect(fill = "white"), panel.grid.major.x = element_line(color = "#DCEEF3"),
plot.background = element_rect(fill = "#DCEEF3")))
#Calculating the Confidence intervals for non-weighted means
CI <- function(data, conf.level = 0.95) {
z = qnorm((1 - conf.level)/2, lower.tail = FALSE)
xbar = mean(dataset$pcc_w[data])
print(paste("Mean and CI"))
print(xbar, digits = 2)
sdx = sqrt(var(dataset$pcc[data])/length(dataset$pcc[data]))
conf.int <- c(xbar - z * sdx, xbar + z * sdx)
print(conf.int, digits = 2)
print(length(dataset$pcc_w[data]))
}
OLS <- lm(formula = pcc_w ~ se_pcc_w, data = dataset)
OLS_id <- coeftest(OLS, vcov = vcovHC(OLS, type = "HC0", cluster = c(dataset$study_id))) #clustering by study_id
print(OLS_id) #OLS
#Weighted by number of observations per study
OLS_w_study <- lm(formula = pcc_w ~ se_pcc_w, data = dataset, weight = c(dataset$study_size*dataset$study_size))
OLS_w_study_c <- coeftest(OLS_w_study, vcov = vcovHC(OLS_w_study, type = "HC0", cluster = c(dataset$study_id)))
print(OLS_w_study_c) #OLS weighted by study, clustered
#Weighted by precision
OLS_w_precision <- lm(formula = pcc_w ~ se_pcc_w, data = dataset, weight = c(dataset$se_precision_w*dataset$se_precision_w))
OLS_w_precision_c <- coeftest(OLS_w_precision, vcov = vcovHC(OLS_w_precision, type = "HC0", cluster = c(dataset$study_id)))
print(OLS_w_precision_c) #OLS weighted by precision, clustered
#Weighted by number of observations per study
OLS_w_study <- lm(formula = pcc_w ~ se_pcc_w, data = dataset, weight = c(dataset$study_size*dataset$study_size))
OLS_w_study_c <- coeftest(OLS_w_study, vcov = vcovHC(OLS_w_study, type = "HC0", cluster = c(dataset$study_id)))
print(OLS_w_study_c) #OLS weighted by study, clustered
#Weighted by precision
OLS_w_precision <- lm(formula = pcc_w ~ se_pcc_w, data = dataset, weight = c(dataset$se_precision_w*dataset$se_precision_w))
OLS_w_precision_c <- coeftest(OLS_w_precision, vcov = vcovHC(OLS_w_precision, type = "HC0", cluster = c(dataset$study_id)))
print(OLS_w_precision_c) #OLS weighted by precision, clustered
#Weighted by number of observations per study
OLS_w_study <- lm(formula = pcc_w ~ se_pcc_w, data = dataset, weight = 1/c(dataset$study_size*dataset$study_size))
OLS_w_study_c <- coeftest(OLS_w_study, vcov = vcovHC(OLS_w_study, type = "HC0", cluster = c(dataset$study_id)))
print(OLS_w_study_c) #OLS weighted by study, clustered
#Weighted by number of observations per study
OLS_w_study <- lm(formula = pcc_w ~ se_pcc_w, data = dataset, weight = (dataset$study_size*dataset$study_size))
OLS_w_study_c <- coeftest(OLS_w_study, vcov = vcovHC(OLS_w_study, type = "HC0", cluster = c(dataset$study_id)))
print(OLS_w_study_c) #OLS weighted by study, clustered
#Weighted by precision
OLS_w_precision <- lm(formula = pcc_w ~ se_pcc_w, data = dataset, weight = 1/c(dataset$se_precision_w*dataset$se_precision_w))
OLS_w_precision_c <- coeftest(OLS_w_precision, vcov = vcovHC(OLS_w_precision, type = "HC0", cluster = c(dataset$study_id)))
print(OLS_w_precision_c) #OLS weighted by precision, clustered
#Weighted by precision
OLS_w_precision <- lm(formula = pcc_w ~ se_pcc_w, data = dataset, weight = (dataset$se_pcc_w*dataset$se_pcc_w))
OLS_w_precision_c <- coeftest(OLS_w_precision, vcov = vcovHC(OLS_w_precision, type = "HC0", cluster = c(dataset$study_id)))
print(OLS_w_precision_c) #OLS weighted by precision, clustered
#Weighted by number of observations per study
OLS_w_study <- lm(formula = pcc_w ~ se_pcc_w, data = dataset, weight = (dataset$study_size*dataset$study_size))
OLS_w_study_c <- coeftest(OLS_w_study, vcov = vcovHC(OLS_w_study, type = "HC0", cluster = c(dataset$study_id)))
print(OLS_w_study_c) #OLS weighted by study, clustered
#Weighted by precision
OLS_w_precision <- lm(formula = pcc_w ~ se_pcc_w, data = dataset, weight = c(dataset$se_precision_w*dataset$se_precision_w))
OLS_w_precision_c <- coeftest(OLS_w_precision, vcov = vcovHC(OLS_w_precision, type = "HC0", cluster = c(dataset$study_id)))
print(OLS_w_precision_c) #OLS weighted by precision, clustered
image(BMA2, yprop2pip=FALSE,order.by.pip=TRUE, do.par=TRUE, do.grid=TRUE, do.axis=TRUE,cex.axis = 0.7,
xlab = "", main = "") #takes time, beware
?image
image(BMA2, yprop2pip=FALSE,order.by.pip=TRUE, do.par=TRUE, do.grid=TRUE, do.axis=TRUE,cex.axis = 0.7,
xlab = "", main = "", cex=1.5) #takes time, beware
image(BMA2, yprop2pip=FALSE,order.by.pip=TRUE, do.par=TRUE, do.grid=TRUE, do.axis=TRUE,cex.axis = 0.7,
xlab = "", main = "", cex.lab=1.5, cex.axis=1.5) #takes time, beware
image(BMA2, yprop2pip=FALSE,order.by.pip=TRUE, do.par=TRUE, do.grid=TRUE, do.axis=TRUE,cex.axis = 0.7,
xlab = "", main = "", cex.axis=1.5) #takes time, beware
image(BMA2, yprop2pip=FALSE,order.by.pip=TRUE, do.par=TRUE, do.grid=TRUE, do.axis=TRUE, xlab = "", main = "") #takes time, beware
?bms
image(BMA1, yprop2pip=FALSE,order.by.pip=TRUE, do.par=TRUE, do.grid=TRUE, do.axis=TRUE) #takes time, beware
image(BMA1, yprop2pip=FALSE,order.by.pip=TRUE, do.par=TRUE, do.grid=TRUE, do.axis=TRUE, xlab = "", main = "") #takes time, beware
image(BMA3, yprop2pip=FALSE,order.by.pip=TRUE, do.par=TRUE, do.grid=TRUE, do.axis=TRUE, xlab = "", main = "") #takes time, beware
image(BMA3, yprop2pip=FALSE,order.by.pip=TRUE, do.par=TRUE, do.grid=TRUE, do.axis=TRUE, xlab = "", main = "") #takes time, beware
image(BMA1, yprop2pip=FALSE,order.by.pip=TRUE, do.par=TRUE, do.grid=TRUE, do.axis=TRUE, xlab = "", main = "") #takes time, beware
image(BMA3, yprop2pip=FALSE,order.by.pip=TRUE, do.par=TRUE, do.grid=TRUE, do.axis=TRUE, xlab = "", main = "") #takes time, beware
image(BMA4, yprop2pip=FALSE,order.by.pip=TRUE, do.par=TRUE, do.grid=TRUE, do.axis=TRUE, xlab = "", main = "") #takes time, beware
#Funnel plot
(funnel_win <- ggplot(data = dataset[filter_pcc_w,], aes(x = pcc_w[filter_pcc_w], y = se_precision_w[filter_pcc_w])) +
geom_point(colour = "#0d4ed1") +
labs(title = NULL, x = "Partial correlation coefficient", y = "Precision of the estimate (1/SE)") +
theme(axis.line = element_line(color = "black", size = 0.5, linetype = "solid"),
axis.text.x = element_text(colour = "black"), axis.text.y = element_text(colour = "black"),
panel.background = element_rect(fill = "white"), panel.grid.major.x = element_line(color = "#DCEEF3"),
plot.background = element_rect(fill = "#DCEEF3")))
image(BMA4, yprop2pip=FALSE,order.by.pip=TRUE, do.par=TRUE, do.grid=TRUE, do.axis=TRUE, xlab = "", main = "") #takes time, beware
#careful, takes about 3-4 mins
BMA4 = bms(BMA_num, burn=1e5,iter=3e5, g="RIC", mprior="random", nmodel=50000,mcmc="bd", user.int =FALSE)
print(BMA4)
#careful, takes about 3-4 mins
BMA4 = bms(BMA_num, burn=1e5,iter=3e5, g="RIC", mprior="random", nmodel=50000,mcmc="bd", user.int =FALSE)
library(ggplot2)
library(readxl)
library(stats)
library(DescTools) #Used for winsorization
library(sandwich)
library(lmtest) #Check for necessity
library(multiwayvcov)
library(metafor)
library(bayesm)
library(puniform)
library(haven)
library(meta)
library(AER)
library(BMS)
#careful, takes about 3-4 mins
BMA4 = bms(BMA_num, burn=1e5,iter=3e5, g="RIC", mprior="random", nmodel=50000,mcmc="bd", user.int =FALSE)
print(BMA4)
image(BMA2, yprop2pip=FALSE,order.by.pip=TRUE, do.par=TRUE, do.grid=TRUE, do.axis=TRUE, xlab = "", main = "") #takes time, beware
#Adding names for clarity of the BMA figure
names(BMA_num) <- c("PCC", "Standard error", "Effect GPA", "Effect Charity", "Effect Game",
"Effect Positive", "OLS", "Logit", "Probit", "Tobit", "Fixed-effects",
"Random-effects", "Diff-in-diff", "Cross-section data",
"Average Year", "Lab study", "Crowding-out", "Journal impact",
"Study citations", "Positive framing", "Reward scaled", "All paid",
"Reward own", "Quan. performance", "Cognitive task",
"Appealing task", "Altruism", "Reciprocity", "Fairness",
"Students", "Employees", "Gender", "Mid age", "Developed country")
head(BMA_num)
BMA_data_orig <- read_excel("C:/Users/hso20/OneDrive/Plocha/Bachelor thesis/Sacred temple of the Data Set/BMA/BMA_data_corr_fix.xlsx",
sheet = "data_set", n_max = 1655)
BMA_data <- (BMA_data_orig[BMA_data_orig$grp_reward == 1,1:34])
###################################
#Winsorization for the new data set
###################################
BMA_data$pcc <- Winsorize(x = BMA_data$pcc, minval = NULL, maxval = NULL, probs = c(0.01,0.99))
BMA_data$se_pcc <- Winsorize(x = BMA_data$se_pcc, minval = NULL, maxval = NULL, probs = c(0.01,0.99))
BMA_num <- data.frame(BMA_data, stringsAsFactors = TRUE)
summary(BMA_num)
BMA_formula <- as.formula(paste("pcc",paste(colnames(BMA_num)[-1],sep="", collapse = "+"), sep="~",collapse = NULL))
BMA_reg_test <- lm(formula = BMA_formula, data = BMA_num)
car::vif(BMA_reg_test) #Testing for VIF
#Adding names for clarity of the BMA figure
names(BMA_num) <- c("PCC", "Standard error", "Effect GPA", "Effect Charity", "Effect Game",
"Effect Positive", "OLS", "Logit", "Probit", "Tobit", "Fixed-effects",
"Random-effects", "Diff-in-diff", "Cross-section data",
"Average Year", "Lab study", "Crowding-out", "Journal impact",
"Study citations", "Positive framing", "Reward scaled", "All paid",
"Reward own", "Quan. performance", "Cognitive task",
"Appealing task", "Altruism", "Reciprocity", "Fairness",
"Students", "Employees", "Gender", "Mid age", "Developed country")
head(BMA_num)
BMA2= bms(BMA_num, burn=1e5,iter=3e5, g="UIP", mprior="dilut", nmodel=50000, mcmc="bd", user.int=FALSE)
print(BMA2)
View(BMA2_c)
image(BMA2, yprop2pip=FALSE,order.by.pip=TRUE, do.par=TRUE, do.grid=TRUE, do.axis=TRUE, xlab = "", main = "") #takes time, beware
library(ggplot2)
library(readxl)
library(stats)
library(DescTools) #Used for winsorization
library(sandwich)
library(lmtest) #Check for necessity
library(multiwayvcov)
library(metafor)
library(bayesm)
library(puniform)
library(haven)
library(meta)
library(AER)
library(BMS)
image(BMA4, yprop2pip=FALSE,order.by.pip=TRUE, do.par=TRUE, do.grid=TRUE, do.axis=TRUE, xlab = "", main = "") #takes time, beware
print(BMA4)
#careful, takes about 3-4 mins
BMA4 = bms(BMA_num, burn=1e5,iter=3e5, g="HQ", mprior="random", nmodel=50000,mcmc="bd", user.int =FALSE)
print(BMA4)
#Extracting the coefficients and plotting the results
coef(BMA4,order.by.pip= F, exact=T, include.constant=T)
image(BMA4, yprop2pip=FALSE,order.by.pip=TRUE, do.par=TRUE, do.grid=TRUE, do.axis=TRUE, xlab = "", main = "") #takes time, beware
#plotting variables x PIP for each of the models
plotComp("UIP and Dilut"=BMA1, "UIP and Uniform"=BMA2,"BRIC and Random"=BMA3,"HQ and Random"=BMA4, add.grid=F,cex.xaxis=0.7)
#Plotting the correlation
library(corrplot)
col<- colorRampPalette(c("red", "white", "blue"))
M <- cor(BMA_num)
corrplot.mixed(M, lower = "number", upper = "circle", lower.col=col(200), upper.col=col(200),tl.pos = c("lt"),
diag = c("u"), tl.col="black", tl.srt=45, tl.cex=0.85, number.cex = 0.5,cl.cex=0.8, cl.ratio=0.1)
?corrplot.mixed
corrplot.mixed(M, lower = "number", upper = "circle", lower.col=col(200), upper.col=col(200),tl.pos = c("lt"),
diag = c("u"), tl.col="black", tl.srt=90, tl.cex=0.85, number.cex = 0.5,cl.cex=0.8, cl.ratio=0.1)
corrplot.mixed(M, lower = "number", upper = "circle", lower.col=col(200), upper.col=col(200),tl.pos = c("lt"),
diag = c("u"), tl.col="black", tl.srt=30, tl.cex=0.85, number.cex = 0.5,cl.cex=0.8, cl.ratio=0.1)
corrplot.mixed(M, lower = "number", upper = "circle", lower.col=col(200), upper.col=col(200),tl.pos = c("lt"),
diag = c("u"), tl.col="black", tl.srt=70, tl.cex=0.85, number.cex = 0.5,cl.cex=0.8, cl.ratio=0.1)
corrplot.mixed(M, lower = "number", upper = "circle", lower.col=col(200), upper.col=col(200),tl.pos = c("lt"),
diag = c("u"), tl.col="black", tl.srt=65, tl.cex=0.85, number.cex = 0.5,cl.cex=0.8, cl.ratio=0.1)
corrplot.mixed(M, lower = "number", upper = "circle", lower.col=col(200), upper.col=col(200),tl.pos = c("lt"),
diag = c("u"), tl.col="black", tl.srt=70, tl.cex=0.85, number.cex = 0.5,cl.cex=0.8, cl.ratio=0.1)
corrplot.mixed(M, lower = "number", upper = "circle", lower.col=col(200), upper.col=col(200),tl.pos = c("lt"),
diag = c("u"), tl.col="black", tl.srt=70, tl.cex=0.85, number.cex = 0.5,cl.cex=0.8, cl.ratio=0.1)
library(readr)
library(tidyverse)
library(ggplot2)
library(readxl)
library(stats)
library(DescTools)
library(sandwich)
library(lmtest)
library(multiwayvcov)
library(metafor)
library(bayesm)
library(puniform)
library(haven)
library(meta)
library(AER)
library(BMS)
library(corrplot)
library(foreign)
library(xtable)
library(LowRankQP)
#Extracting the coefficients and plotting the results
coef(BMA2,order.by.pip= F, exact=T, include.constant=T)
summary(BMA2)
class(BBMA_data)
class(BMA2)
BMA2[1]
BMA2['PIP']
print(BMA2$topmod[1])
BMA2_test <- coef(BMA2,order.by.pip= F, exact=T, include.constant=T)
BMA2_test
class(BMA2_test)
print(BMA2_test[:,1])
print(BMA2_test[,1])
print(BMA2_test[,2])
#Extracting the coefficients and plotting the results
coef(BMA2,order.by.pip= F, exact=T, include.constant=T)
instrument <- 1/sqrt(dataset$n_obs) #instrument to be used as weight
IV_reg1 <- ivreg(formula = pcc_w ~ se_pcc_w | instrument, data = dataset)
summary(IV_reg1, vcov = vcovHC(IV_reg1, cluster = c(dataset$study_id)), diagnostics = TRUE) #Diagnostic tests included in the summary
library(readr)
library(tidyverse)
library(ggplot2)
library(readxl)
library(stats)
library(DescTools)
library(sandwich)
library(lmtest)
library(multiwayvcov)
library(metafor)
library(bayesm)
library(puniform)
library(haven)
library(meta)
library(AER)
library(BMS)
library(corrplot)
library(foreign)
library(xtable)
library(LowRankQP)
library(foreign)
library(multcomp)
instrument <- 1/sqrt(dataset$n_obs) #instrument to be used as weight
IV_reg1 <- ivreg(formula = pcc_w ~ se_pcc_w | instrument, data = dataset)
summary(IV_reg1, vcov = vcovHC(IV_reg1, cluster = c(dataset$study_id)), diagnostics = TRUE) #Diagnostic tests included in the summary
instrument <- 1/(dataset$n_obs)
IV_reg2 <- ivreg(formula = pcc_w ~ se_pcc_w | instrument, data = dataset)
summary(IV_reg2, vcov = vcovHC(IV_reg2, cluster = c(dataset$study_id)), diagnostics = TRUE)
instrument <- 1/(dataset$n_obs^2)
IV_reg3 <- ivreg(formula = pcc_w ~ se_pcc_w | instrument, data = dataset)
summary(IV_reg3, vcov = vcovHC(IV_reg3, cluster = c(dataset$study_id)), diagnostics = TRUE)
#The test with best performing instruments
instrument <- log(dataset$n_obs)
IV_reg4 <- ivreg(formula = pcc_w ~ se_pcc_w | instrument, data = dataset)
summary(IV_reg4, vcov = vcovHC(IV_reg4, cluster = c(dataset$study_id)), diagnostics = TRUE)
setwd("C:/Users/hso20/OneDrive/Plocha/IES/Diploma-Thesis/P&P (2018) analysis")
data <- read_xslx('Data transformed for R.xlsx'), sheet_name = 'Data')
data <- read_xslx('Data transformed for R.xlsx', sheet_name = 'Data')
data <- read_excel('Data transformed for R.xlsx', sheet_name = 'Data')
data <- read.xlsx('Data transformed for R.xlsx', sheet_name = 'Data')
#Packages
library('readxl')
### Packages ###
library('readxl')
### Data preparation ###
setwd("C:/Users/hso20/OneDrive/Plocha/IES/Diploma-Thesis/P&P (2018) analysis")
data <- read.xlsx('Data transformed for R.xlsx', sheet_name = 'Data')
data <- read_excel('Data transformed for R.xlsx', sheet_name = 'Data')
data <- read_excel('Data transformed for R.xlsx', sheet = 'Data')
data
View(data)
### Data exploration ###
data$mp_overall[NA_real_]
### Data exploration ###
data$mp_overall[NULL]
!is.na(data$mp_overall)
sum*!is.na(data$mp_overall))
sum(!is.na(data$mp_overall))
### Data exploration ###
data[!is.na(data$mp_overall)]
!is.na(data$mp_overall)
### Data exploration ###
data[!is.na(data$mp_overall),]
### Data exploration ###
data[!is.na(data$mp_overall),]$schooling_years
### Data exploration ###
data[!is.na(data$mp_overall),]
### Data exploration ###
mp_overall_data <- data[!is.na(data$mp_overall),]
test_reg <- lm()
?lm
test_reg <- lm(formula = test_formula, data = mp_overall_data)
test_formula <- 'mp_overall ~ schooling_years'
test_reg <- lm(formula = test_formula, data = mp_overall_data)
test_reg
sumamry(test_reg)
summary(test_reg)
summary(data$mp_overall)
data$mp_overall
########################################################
##### Psacharopoulos & Patrinos (2018) exploration #####
########################################################
### Packages ###
library('readxl')
### Data preparation ###
setwd("C:/Users/hso20/OneDrive/Plocha/IES/Diploma-Thesis/P&P (2018) analysis")
data <- read_excel('Data transformed for R.xlsx', sheet = 'Data')
#View(data)
### Data exploration ###
mp_overall_data <- data[!is.na(data$mp_overall),]
test_formula <- 'mp_overall ~ schooling_years'
test_reg <- lm(formula = test_formula, data = mp_overall_data)
test_reg
View(data)
