****************************************************************************** * Publication bias - Endogenous kink (Bom & Rachinger, 2020) * code downloaded from https://sites.google.com/site/heikorachinger/codes ****************************************************************************** quietly{ clear use discrate_boot.dta, replace rename discrate bs rename standard_error_comb sebs gen ones=1 sum local M=r(N) sum sebs local sebs_min=r(min) local sebs_max=r(max) gen sebs2=sebs^2 gen wis=ones/sebs2 gen bs_sebs=bs/sebs gen ones_sebs=ones/sebs gen bswis=bs*wis sum wis local wis_sum=r(sum) regress bs_sebs ones_sebs ones,noclocal pet=_b[ones_sebs] local t1_linreg = (_b[ones_sebs]/_se[ones_sebs]) local b_lin=_b[ones_sebs] local Q1_lin = e(rss) di `t1_linreg' local abs_t1_linreg = abs(`t1_linreg') di `abs_t1_linreg'
regress bs_sebs ones_sebs sebs,noclocal peese=_b[ones_sebs] local b_sq=_b[ones_sebs] local Q1_sq = e(rss) di `Q1_sq' if `abs_t1_linreg' > invt(`M-2', 0.975) { local combreg=`b_sq' local Q1=`Q1_sq' } else { local combreg=`b_lin' local Q1=`Q1_lin' } local sigh2hat=max(0,`M'*((`Q1'/(`M'-e(df_m)-1))-1)/`wis_sum') local sighhat=sqrt(`sigh2hat') if `combreg'>1.96*`sighhat' { local a1=(`combreg'-1.96*`sighhat')*(`combreg'+1.96*`sighhat')/(2*1.96*`combreg') } else { local a1=0 } rename bs bs_original rename bs_sebs bs rename ones_sebs constant rename ones pub_bias noisily: display "EK regression: " if `a1'>`sebs_min' & `a1'<`sebs_max' { gen sebs_a1=sebs-`a1' if sebs>`a1' replace sebs_a1=0 if sebs<=`a1' gen pubbias=sebs_a1/sebs noisily regress bs constant pubbias, noc local b0_ek=_b[constant] local b1_ek=_b[pubbias] local sd0_ek=_se[constant] local sd1_ek=_se[pubbias] } else if `a1'<`sebs_min' { noisily regress bs constant pub_bias, noc local b0_ek=_b[constant] local b1_ek=_b[pub_bias] local sd0_ek=_se[constant] local sd1_ek=_se[pub_bias]} else if `a1'>`sebs_max' { noisily regress bs constant, noc local b0_ek=_b[constant] local sd0_ek=_se[constant] } noisily: display "EK's mean effect estimate (alpha1) and standard error:" noisily: di `b0_ek' noisily: di `sd0_ek' noisily: display "EK's publication bias estimate (delta) and standard error:" noisily: di `b1_ek' noisily: di `sd1_ek' } rename bs discrate rename sebs standard_error_comb quietly{ clear use discrate_boot.dta, replace
rename discrate bs rename standard_error sebs gen ones=1 sum local M=r(N) sum sebs local sebs_min=r(min) local sebs_max=r(max) gen sebs2=sebs^2 gen wis=ones/sebs2 gen bs_sebs=bs/sebs gen ones_sebs=ones/sebs gen bswis=bs*wis sum wis local wis_sum=r(sum) regress bs_sebs ones_sebs ones,noclocal pet=_b[ones_sebs] local t1_linreg = (_b[ones_sebs]/_se[ones_sebs]) local b_lin=_b[ones_sebs] local Q1_lin = e(rss) di `t1_linreg' local abs_t1_linreg = abs(`t1_linreg') di `abs_t1_linreg' regress bs_sebs ones_sebs sebs,noclocal peese=_b[ones_sebs] local b_sq=_b[ones_sebs] local Q1_sq = e(rss) di `Q1_sq' if `abs_t1_linreg' > invt(`M-2', 0.975) { local combreg=`b_sq' local Q1=`Q1_sq' } else { local combreg=`b_lin' local Q1=`Q1_lin' } local sigh2hat=max(0,`M'*((`Q1'/(`M'-e(df_m)-1))-1)/`wis_sum') local sighhat=sqrt(`sigh2hat') if `combreg'>1.96*`sighhat' { local a1=(`combreg'-1.96*`sighhat')*(`combreg'+1.96*`sighhat')/(2*1.96*`combreg') } else { local a1=0 } rename bs bs_original rename bs_sebs bs rename ones_sebs constant rename ones pub_bias noisily: display "EK regression: " if `a1'>`sebs_min' & `a1'<`sebs_max' { gen sebs_a1=sebs-`a1' if sebs>`a1' replace sebs_a1=0 if sebs<=`a1' gen pubbias=sebs_a1/sebs noisily regress bs constant pubbias, noc local b0_ek=_b[constant] local b1_ek=_b[pubbias] local sd0_ek=_se[constant] local sd1_ek=_se[pubbias] } else if `a1'<`sebs_min' { noisily regress bs constant pub_bias, noc local b0_ek=_b[constant] local b1_ek=_b[pub_bias] local sd0_ek=_se[constant]
local sd1_ek=_se[pub_bias]} else if `a1'>`sebs_max' { noisily regress bs constant, noc local b0_ek=_b[constant] local sd0_ek=_se[constant] } noisily: display "EK's mean effect estimate (alpha1) and standard error:" noisily: di `b0_ek' noisily: di `sd0_ek' noisily: display "EK's publication bias estimate (delta) and standard error:" noisily: di `b1_ek' noisily: di `sd1_ek' } rename bs discrate rename sebs standard_error quietly{ clear use discrate_boot.dta, replace rename discrate_na bs rename standard_error_comb_na sebs gen ones=1 sum local M=r(N) sum sebs local sebs_min=r(min) local sebs_max=r(max) gen sebs2=sebs^2 gen wis=ones/sebs2 gen bs_sebs=bs/sebs gen ones_sebs=ones/sebs gen bswis=bs*wis sum wis local wis_sum=r(sum) regress bs_sebs ones_sebs ones,noclocal pet=_b[ones_sebs] local t1_linreg = (_b[ones_sebs]/_se[ones_sebs]) local b_lin=_b[ones_sebs] local Q1_lin = e(rss) di `t1_linreg' local abs_t1_linreg = abs(`t1_linreg') di `abs_t1_linreg' regress bs_sebs ones_sebs sebs,noclocal peese=_b[ones_sebs] local b_sq=_b[ones_sebs] local Q1_sq = e(rss) di `Q1_sq' if `abs_t1_linreg' > invt(`M-2', 0.975) { local combreg=`b_sq' local Q1=`Q1_sq' } else { local combreg=`b_lin' local Q1=`Q1_lin' } local sigh2hat=max(0,`M'*((`Q1'/(`M'-e(df_m)-1))-1)/`wis_sum') local sighhat=sqrt(`sigh2hat') if `combreg'>1.96*`sighhat' {
local a1=(`combreg'-1.96*`sighhat')*(`combreg'+1.96*`sighhat')/(2*1.96*`combreg') } else { local a1=0 } rename bs bs_original rename bs_sebs bs rename ones_sebs constant rename ones pub_bias noisily: display "EK regression: " if `a1'>`sebs_min' & `a1'<`sebs_max' { gen sebs_a1=sebs-`a1' if sebs>`a1' replace sebs_a1=0 if sebs<=`a1' gen pubbias=sebs_a1/sebs noisily regress bs constant pubbias, noc local b0_ek=_b[constant] local b1_ek=_b[pubbias] local sd0_ek=_se[constant] local sd1_ek=_se[pubbias] } else if `a1'<`sebs_min' { noisily regress bs constant pub_bias, noc local b0_ek=_b[constant] local b1_ek=_b[pub_bias] local sd0_ek=_se[constant] local sd1_ek=_se[pub_bias]} else if `a1'>`sebs_max' { noisily regress bs constant, noc local b0_ek=_b[constant] local sd0_ek=_se[constant] } noisily: display "EK's mean effect estimate (alpha1) and standard error:" noisily: di `b0_ek' noisily: di `sd0_ek' noisily: display "EK's publication bias estimate (delta) and standard error:" noisily: di `b1_ek' noisily: di `sd1_ek' } rename bs discrate_na rename sebs standard_error_comb_na